#include "functions.h"

__constant__ int bit_reverse[256];
__constant__ int inv_pow[128];
__constant__ int multipler[256];
__constant__ int multipler_pow[256];

void Initialize_iNTT()
{
	cudaError_t err;
	int bit_reverse_cpu[256] = {
		0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240,
		8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248,
		4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244,
		12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252,
		2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242,
		10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250,
		6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246,
		14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254,
		1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241,
		9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249,
		5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245,
		13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253,
		3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243,
		11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251,
		7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247,
		15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255};
	cudaMemcpyToSymbol(bit_reverse, bit_reverse_cpu, sizeof(bit_reverse_cpu));
	err = cudaGetLastError();
	printf("%s\n", cudaGetErrorString(err));

	int inv_pow_cpu[128] =
		{
			1, 6621070, 3227876, 2101410, 3764867, 6526611, 5717039, 4874037,
			5234739, 3950053, 5564778, 4778199, 3542485, 5483103, 434125, 6308588,
			3761513, 7562881, 6919699, 4675594, 7159240, 3345963, 5010068, 7451668,
			3201494, 6444618, 7737789, 3586446, 5698129, 3870317, 676590, 6224367,
			3572223, 4965348, 1714295, 5269599, 1005239, 5463079, 6705802, 1095468,
			3201430, 1716988, 2283733, 3182878, 7778734, 5188063, 3524442, 4361428,
			3765607, 3574466, 5926434, 1159875, 557458, 6522001, 4063053, 7986269,
			5496691, 3756790, 3585098, 5639874, 2129892, 556856, 1335936, 5138445,
			8380416, 1759347, 5152541, 6279007, 4615550, 1853806, 2663378, 3506380,
			3145678, 4430364, 2815639, 3602218, 4837932, 2897314, 7946292, 2071829,
			4618904, 817536, 1460718, 3704823, 1221177, 5034454, 3370349, 928749,
			5178923, 1935799, 642628, 4793971, 2682288, 4510100, 7703827, 2156050,
			4808194, 3415069, 6666122, 3110818, 7375178, 2917338, 1674615, 7284949,
			5178987, 6663429, 6096684, 5197539, 601683, 3192354, 4855975, 4018989,
			4614810, 4805951, 2453983, 7220542, 7822959, 1858416, 4317364, 394148,
			2883726, 4623627, 4795319, 2740543, 6250525, 7823561, 7044481, 3241972};
	cudaMemcpyToSymbol(inv_pow, inv_pow_cpu, sizeof(inv_pow_cpu));
	err = cudaGetLastError();
	printf("%s\n", cudaGetErrorString(err));

	int multipler_cpu[256] = {
		8347681, 4814255, 4410553, 4950869, 3757768, 8283743, 3084753, 7212245,
		929217, 2548863, 7112909, 6438604, 3085393, 1522988, 7716078, 3983976,
		4106707, 6358574, 2828477, 185954, 3593719, 5138369, 2329247, 5487225,
		6864157, 8004116, 3147955, 5846913, 6664448, 7853281, 4236571, 3511264,
		6731329, 4673304, 3063582, 422355, 899302, 5083293, 3294681, 5812371,
		4932138, 3037717, 4273500, 91254, 1360841, 3140526, 5511220, 4577748,
		1421486, 974914, 2476077, 1699788, 5291915, 7926232, 4581970, 1366346,
		1671232, 4636662, 7166633, 3978303, 679363, 528086, 2900776, 8265255,
		4957830, 30446, 1269720, 4957822, 4187015, 2546702, 5882680, 1500957,
		7785463, 7142954, 5498368, 7103706, 8071321, 3425482, 3238655, 8020875,
		1861182, 6177373, 2983768, 5263914, 6985839, 1131019, 1548887, 5055453,
		3555059, 8088721, 5357850, 8101249, 7754805, 2886683, 858901, 2284177,
		1387418, 6473505, 1613291, 1411591, 5983127, 4329688, 7991919, 7904371,
		2223538, 6720916, 4360703, 7987816, 3745914, 1388051, 5468798, 7422407,
		5751059, 6911937, 1500709, 2552430, 4827311, 647298, 7640078, 2864572,
		591891, 1452141, 3647242, 5499308, 580826, 493025, 3700088, 394624,
		46690, 4626493, 1594724, 3476254, 936004, 7517851, 6922202, 7476292,
		4491529, 1852791, 748978, 7796856, 5291081, 3371762, 7810880, 1407997,
		2393655, 3955287, 273317, 3782654, 7125053, 7220863, 503044, 5498600,
		3889043, 4560511, 1745851, 5710584, 6944312, 7215321, 7578292, 5993887,
		3482522, 56197, 4272077, 3011821, 137651, 2136407, 3317318, 7243626,
		1416569, 2821607, 1677045, 6557593, 7410770, 4481823, 6084409, 3860453,
		2714738, 2223217, 4847355, 7412208, 1100554, 7008362, 1035359, 3659686,
		5447944, 394154, 3308130, 35224, 1457421, 708061, 732888, 1944987,
		5023318, 7230049, 6655484, 1586785, 2043595, 642945, 5573043, 4222896,
		7290543, 188494, 3798739, 1956600, 2001427, 3508106, 7070314, 1746720,
		3603138, 223710, 1032312, 3941643, 3659173, 2767035, 571559, 1856626,
		5875616, 1128738, 4004274, 2511702, 5367165, 6939485, 6297802, 4983838,
		4637248, 6488070, 6814167, 4167059, 342035, 6755819, 3944563, 3366965,
		5971957, 6595486, 1759007, 4462927, 2051663, 3141817, 8320914, 1729890,
		924928, 750944, 6635794, 5738392, 6549376, 1666482, 2471595, 6946957,
		4195427, 2301864, 4002827, 1141142, 7974921, 329523, 4426143, 6605165};

	cudaMemcpyToSymbol(multipler, multipler_cpu, sizeof(multipler_cpu));
	err = cudaGetLastError();
	printf("%s\n", cudaGetErrorString(err));

	int multipler_pow_cpu[256] = {
		8347681, 4950869, 3084753, 2548863, 3085393, 3983976, 2828477, 5138369,
		6864157, 5846913, 4236571, 4673304, 899302, 5812371, 4273500, 3140526,
		1421486, 1699788, 4581970, 4636662, 679363, 8265255, 1269720, 2546702,
		7785463, 7103706, 3238655, 6177373, 6985839, 5055453, 5357850, 2886683,
		1387418, 1411591, 7991919, 6720916, 3745914, 7422407, 1500709, 647298,
		591891, 5499308, 3700088, 4626493, 936004, 7476292, 748978, 3371762,
		2393655, 3782654, 503044, 4560511, 6944312, 5993887, 4272077, 2136407,
		1416569, 6557593, 6084409, 2223217, 1100554, 3659686, 3308130, 708061,
		5023318, 1586785, 5573043, 188494, 2001427, 1746720, 1032312, 2767035,
		5875616, 2511702, 6297802, 6488070, 342035, 3366965, 1759007, 3141817,
		924928, 5738392, 2471595, 2301864, 7974921, 6605165, 3969864, 96674,
		7451200, 1941813, 664339, 2021843, 4786698, 2893192, 5232462, 527136,
		1649088, 7958062, 5085736, 5342700, 7019576, 3802669, 5904340, 454185,
		6709185, 4402114, 5479641, 8349971, 4193402, 6879460, 2882049, 4954935,
		6519235, 3116503, 6831530, 291696, 625612, 6096240, 6767126, 4050729,
		6156879, 392601, 2911619, 1468480, 3553106, 5515845, 4733175, 7887392,
		8333727, 4904163, 1458215, 6527626, 3089336, 6972420, 8107100, 1159554,
		4491374, 2669833, 802125, 8324220, 8242766, 1136791, 6703372, 3898594,
		5665679, 968209, 7345058, 7986263, 6922996, 6435430, 1724933, 7737472,
		1089874, 6423817, 1310103, 8156707, 4721244, 6523791, 4376143, 1440932,
		3743169, 4213358, 4435854, 1784931, 6328754, 6650527, 1744623, 6713935,
		4184990, 7239275, 3954274, 4814255, 3757768, 7212245, 7112909, 1522988,
		4106707, 185954, 2329247, 8004116, 6664448, 3511264, 3063582, 5083293,
		4932138, 91254, 5511220, 974914, 5291915, 1366346, 7166633, 528086,
		4957830, 4957822, 5882680, 7142954, 8071321, 8020875, 2983768, 1131019,
		3555059, 8101249, 858901, 6473505, 5983127, 7904371, 4360703, 1388051,
		5751059, 2552430, 7640078, 1452141, 580826, 394624, 1594724, 7517851,
		4491529, 7796856, 7810880, 3955287, 7125053, 5498600, 1745851, 7215321,
		3482522, 3011821, 3317318, 2821607, 7410770, 3860453, 4847355, 7008362,
		5447944, 35224, 732888, 7230049, 2043595, 4222896, 3798739, 3508106,
		3603138, 3941643, 571559, 1128738, 5367165, 4983838, 6814167, 6755819,
		5971957, 4462927, 8320914, 750944, 6549376, 6946957, 4002827, 329523};

	cudaMemcpyToSymbol(multipler_pow, multipler_pow_cpu, sizeof(multipler_cpu));
	err = cudaGetLastError();
	printf("%s\n", cudaGetErrorString(err));
}

__global__ void iNTT(int64 *a, int64 *out)
{
	int idx = threadIdx.x;
	int idx0 = idx;
	int idx1 = idx + 32;
	int idx2 = idx + 64;
	int idx3 = idx + 96;
	int idx4 = idx + 128;
	int idx5 = idx + 160;
	int idx6 = idx + 192;
	int idx7 = idx + 224;

	int64 *vec_1 = a + blockIdx.x * 256;
	int64 *vec_2 = out + blockIdx.x * 256;
	vec_2[idx0] = vec_1[bit_reverse[idx0]];
	vec_2[idx1] = vec_1[bit_reverse[idx1]];
	vec_2[idx2] = vec_1[bit_reverse[idx2]];
	vec_2[idx3] = vec_1[bit_reverse[idx3]];
	vec_2[idx4] = vec_1[bit_reverse[idx4]];
	vec_2[idx5] = vec_1[bit_reverse[idx5]];
	vec_2[idx6] = vec_1[bit_reverse[idx6]];
	vec_2[idx7] = vec_1[bit_reverse[idx7]];

	vec_1[idx0] = (vec_2[idx0 & 0xFFFFFFFE] + (int64)inv_pow[(idx0 << 6) & 0x7F] * vec_2[idx0 | 0x00000001]) % 8380417;
	vec_1[idx1] = (vec_2[idx1 & 0xFFFFFFFE] + (int64)inv_pow[(idx1 << 6) & 0x7F] * vec_2[idx1 | 0x00000001]) % 8380417;
	vec_1[idx2] = (vec_2[idx2 & 0xFFFFFFFE] + (int64)inv_pow[(idx2 << 6) & 0x7F] * vec_2[idx2 | 0x00000001]) % 8380417;
	vec_1[idx3] = (vec_2[idx3 & 0xFFFFFFFE] + (int64)inv_pow[(idx3 << 6) & 0x7F] * vec_2[idx3 | 0x00000001]) % 8380417;
	vec_1[idx4] = (vec_2[idx4 & 0xFFFFFFFE] + (int64)inv_pow[(idx4 << 6) & 0x7F] * vec_2[idx4 | 0x00000001]) % 8380417;
	vec_1[idx5] = (vec_2[idx5 & 0xFFFFFFFE] + (int64)inv_pow[(idx5 << 6) & 0x7F] * vec_2[idx5 | 0x00000001]) % 8380417;
	vec_1[idx6] = (vec_2[idx6 & 0xFFFFFFFE] + (int64)inv_pow[(idx6 << 6) & 0x7F] * vec_2[idx6 | 0x00000001]) % 8380417;
	vec_1[idx7] = (vec_2[idx7 & 0xFFFFFFFE] + (int64)inv_pow[(idx7 << 6) & 0x7F] * vec_2[idx7 | 0x00000001]) % 8380417;

	vec_2[idx0] = (vec_1[idx0 & 0xFFFFFFFD] + (int64)inv_pow[(idx0 << 5) & 0x7F] * vec_1[idx0 | 0x00000002]) % 8380417;
	vec_2[idx1] = (vec_1[idx1 & 0xFFFFFFFD] + (int64)inv_pow[(idx1 << 5) & 0x7F] * vec_1[idx1 | 0x00000002]) % 8380417;
	vec_2[idx2] = (vec_1[idx2 & 0xFFFFFFFD] + (int64)inv_pow[(idx2 << 5) & 0x7F] * vec_1[idx2 | 0x00000002]) % 8380417;
	vec_2[idx3] = (vec_1[idx3 & 0xFFFFFFFD] + (int64)inv_pow[(idx3 << 5) & 0x7F] * vec_1[idx3 | 0x00000002]) % 8380417;
	vec_2[idx4] = (vec_1[idx4 & 0xFFFFFFFD] + (int64)inv_pow[(idx4 << 5) & 0x7F] * vec_1[idx4 | 0x00000002]) % 8380417;
	vec_2[idx5] = (vec_1[idx5 & 0xFFFFFFFD] + (int64)inv_pow[(idx5 << 5) & 0x7F] * vec_1[idx5 | 0x00000002]) % 8380417;
	vec_2[idx6] = (vec_1[idx6 & 0xFFFFFFFD] + (int64)inv_pow[(idx6 << 5) & 0x7F] * vec_1[idx6 | 0x00000002]) % 8380417;
	vec_2[idx7] = (vec_1[idx7 & 0xFFFFFFFD] + (int64)inv_pow[(idx7 << 5) & 0x7F] * vec_1[idx7 | 0x00000002]) % 8380417;

	vec_1[idx0] = (vec_2[idx0 & 0xFFFFFFFB] + (int64)inv_pow[(idx0 << 4) & 0x7F] * vec_2[idx0 | 0x00000004]) % 8380417;
	vec_1[idx1] = (vec_2[idx1 & 0xFFFFFFFB] + (int64)inv_pow[(idx1 << 4) & 0x7F] * vec_2[idx1 | 0x00000004]) % 8380417;
	vec_1[idx2] = (vec_2[idx2 & 0xFFFFFFFB] + (int64)inv_pow[(idx2 << 4) & 0x7F] * vec_2[idx2 | 0x00000004]) % 8380417;
	vec_1[idx3] = (vec_2[idx3 & 0xFFFFFFFB] + (int64)inv_pow[(idx3 << 4) & 0x7F] * vec_2[idx3 | 0x00000004]) % 8380417;
	vec_1[idx4] = (vec_2[idx4 & 0xFFFFFFFB] + (int64)inv_pow[(idx4 << 4) & 0x7F] * vec_2[idx4 | 0x00000004]) % 8380417;
	vec_1[idx5] = (vec_2[idx5 & 0xFFFFFFFB] + (int64)inv_pow[(idx5 << 4) & 0x7F] * vec_2[idx5 | 0x00000004]) % 8380417;
	vec_1[idx6] = (vec_2[idx6 & 0xFFFFFFFB] + (int64)inv_pow[(idx6 << 4) & 0x7F] * vec_2[idx6 | 0x00000004]) % 8380417;
	vec_1[idx7] = (vec_2[idx7 & 0xFFFFFFFB] + (int64)inv_pow[(idx7 << 4) & 0x7F] * vec_2[idx7 | 0x00000004]) % 8380417;

	vec_2[idx0] = (vec_1[idx0 & 0xFFFFFFF7] + (int64)inv_pow[(idx0 << 3) & 0x7F] * vec_1[idx0 | 0x00000008]) % 8380417;
	vec_2[idx1] = (vec_1[idx1 & 0xFFFFFFF7] + (int64)inv_pow[(idx1 << 3) & 0x7F] * vec_1[idx1 | 0x00000008]) % 8380417;
	vec_2[idx2] = (vec_1[idx2 & 0xFFFFFFF7] + (int64)inv_pow[(idx2 << 3) & 0x7F] * vec_1[idx2 | 0x00000008]) % 8380417;
	vec_2[idx3] = (vec_1[idx3 & 0xFFFFFFF7] + (int64)inv_pow[(idx3 << 3) & 0x7F] * vec_1[idx3 | 0x00000008]) % 8380417;
	vec_2[idx4] = (vec_1[idx4 & 0xFFFFFFF7] + (int64)inv_pow[(idx4 << 3) & 0x7F] * vec_1[idx4 | 0x00000008]) % 8380417;
	vec_2[idx5] = (vec_1[idx5 & 0xFFFFFFF7] + (int64)inv_pow[(idx5 << 3) & 0x7F] * vec_1[idx5 | 0x00000008]) % 8380417;
	vec_2[idx6] = (vec_1[idx6 & 0xFFFFFFF7] + (int64)inv_pow[(idx6 << 3) & 0x7F] * vec_1[idx6 | 0x00000008]) % 8380417;
	vec_2[idx7] = (vec_1[idx7 & 0xFFFFFFF7] + (int64)inv_pow[(idx7 << 3) & 0x7F] * vec_1[idx7 | 0x00000008]) % 8380417;

	vec_1[idx0] = (vec_2[idx0 & 0xFFFFFFEF] + (int64)inv_pow[(idx0 << 2) & 0x7F] * vec_2[idx0 | 0x00000010]) % 8380417;
	vec_1[idx1] = (vec_2[idx1 & 0xFFFFFFEF] + (int64)inv_pow[(idx1 << 2) & 0x7F] * vec_2[idx1 | 0x00000010]) % 8380417;
	vec_1[idx2] = (vec_2[idx2 & 0xFFFFFFEF] + (int64)inv_pow[(idx2 << 2) & 0x7F] * vec_2[idx2 | 0x00000010]) % 8380417;
	vec_1[idx3] = (vec_2[idx3 & 0xFFFFFFEF] + (int64)inv_pow[(idx3 << 2) & 0x7F] * vec_2[idx3 | 0x00000010]) % 8380417;
	vec_1[idx4] = (vec_2[idx4 & 0xFFFFFFEF] + (int64)inv_pow[(idx4 << 2) & 0x7F] * vec_2[idx4 | 0x00000010]) % 8380417;
	vec_1[idx5] = (vec_2[idx5 & 0xFFFFFFEF] + (int64)inv_pow[(idx5 << 2) & 0x7F] * vec_2[idx5 | 0x00000010]) % 8380417;
	vec_1[idx6] = (vec_2[idx6 & 0xFFFFFFEF] + (int64)inv_pow[(idx6 << 2) & 0x7F] * vec_2[idx6 | 0x00000010]) % 8380417;
	vec_1[idx7] = (vec_2[idx7 & 0xFFFFFFEF] + (int64)inv_pow[(idx7 << 2) & 0x7F] * vec_2[idx7 | 0x00000010]) % 8380417;

	vec_2[idx0] = (vec_1[idx0 & 0xFFFFFFDF] + (int64)inv_pow[(idx0 << 1) & 0x7F] * vec_1[idx0 | 0x00000020]) % 8380417;
	vec_2[idx1] = (vec_1[idx1 & 0xFFFFFFDF] + (int64)inv_pow[(idx1 << 1) & 0x7F] * vec_1[idx1 | 0x00000020]) % 8380417;
	vec_2[idx2] = (vec_1[idx2 & 0xFFFFFFDF] + (int64)inv_pow[(idx2 << 1) & 0x7F] * vec_1[idx2 | 0x00000020]) % 8380417;
	vec_2[idx3] = (vec_1[idx3 & 0xFFFFFFDF] + (int64)inv_pow[(idx3 << 1) & 0x7F] * vec_1[idx3 | 0x00000020]) % 8380417;
	vec_2[idx4] = (vec_1[idx4 & 0xFFFFFFDF] + (int64)inv_pow[(idx4 << 1) & 0x7F] * vec_1[idx4 | 0x00000020]) % 8380417;
	vec_2[idx5] = (vec_1[idx5 & 0xFFFFFFDF] + (int64)inv_pow[(idx5 << 1) & 0x7F] * vec_1[idx5 | 0x00000020]) % 8380417;
	vec_2[idx6] = (vec_1[idx6 & 0xFFFFFFDF] + (int64)inv_pow[(idx6 << 1) & 0x7F] * vec_1[idx6 | 0x00000020]) % 8380417;
	vec_2[idx7] = (vec_1[idx7 & 0xFFFFFFDF] + (int64)inv_pow[(idx7 << 1) & 0x7F] * vec_1[idx7 | 0x00000020]) % 8380417;

	vec_1[idx0] = (vec_2[idx0 & 0xFFFFFFBF] + (int64)inv_pow[idx0 & 0x7F] * vec_2[idx0 | 0x00000040]) % 8380417;
	vec_1[idx1] = (vec_2[idx1 & 0xFFFFFFBF] + (int64)inv_pow[idx1 & 0x7F] * vec_2[idx1 | 0x00000040]) % 8380417;
	vec_1[idx2] = (vec_2[idx2 & 0xFFFFFFBF] + (int64)inv_pow[idx2 & 0x7F] * vec_2[idx2 | 0x00000040]) % 8380417;
	vec_1[idx3] = (vec_2[idx3 & 0xFFFFFFBF] + (int64)inv_pow[idx3 & 0x7F] * vec_2[idx3 | 0x00000040]) % 8380417;
	vec_1[idx4] = (vec_2[idx4 & 0xFFFFFFBF] + (int64)inv_pow[idx4 & 0x7F] * vec_2[idx4 | 0x00000040]) % 8380417;
	vec_1[idx5] = (vec_2[idx5 & 0xFFFFFFBF] + (int64)inv_pow[idx5 & 0x7F] * vec_2[idx5 | 0x00000040]) % 8380417;
	vec_1[idx6] = (vec_2[idx6 & 0xFFFFFFBF] + (int64)inv_pow[idx6 & 0x7F] * vec_2[idx6 | 0x00000040]) % 8380417;
	vec_1[idx7] = (vec_2[idx7 & 0xFFFFFFBF] + (int64)inv_pow[idx7 & 0x7F] * vec_2[idx7 | 0x00000040]) % 8380417;

	vec_2[idx0] = ((int64)vec_1[idx0 & 0xFFFFFF7F] * multipler[idx0] + (int64)vec_1[idx0 | 0x00000080] * multipler_pow[idx0]) % 8380417;
	vec_2[idx1] = ((int64)vec_1[idx1 & 0xFFFFFF7F] * multipler[idx1] + (int64)vec_1[idx1 | 0x00000080] * multipler_pow[idx1]) % 8380417;
	vec_2[idx2] = ((int64)vec_1[idx2 & 0xFFFFFF7F] * multipler[idx2] + (int64)vec_1[idx2 | 0x00000080] * multipler_pow[idx2]) % 8380417;
	vec_2[idx3] = ((int64)vec_1[idx3 & 0xFFFFFF7F] * multipler[idx3] + (int64)vec_1[idx3 | 0x00000080] * multipler_pow[idx3]) % 8380417;
	vec_2[idx4] = ((int64)vec_1[idx4 & 0xFFFFFF7F] * multipler[idx4] + (int64)vec_1[idx4 | 0x00000080] * multipler_pow[idx4]) % 8380417;
	vec_2[idx5] = ((int64)vec_1[idx5 & 0xFFFFFF7F] * multipler[idx5] + (int64)vec_1[idx5 | 0x00000080] * multipler_pow[idx5]) % 8380417;
	vec_2[idx6] = ((int64)vec_1[idx6 & 0xFFFFFF7F] * multipler[idx6] + (int64)vec_1[idx6 | 0x00000080] * multipler_pow[idx6]) % 8380417;
	vec_2[idx7] = ((int64)vec_1[idx7 & 0xFFFFFF7F] * multipler[idx7] + (int64)vec_1[idx7 | 0x00000080] * multipler_pow[idx7]) % 8380417;
}
